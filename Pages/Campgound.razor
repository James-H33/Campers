@page "/campground/{Id}"

@using Campers.Services.Interfaces
@using System.Collections.Generic
@using Campers.Models

@inject ICampgroundService CampgroundService
@inject ICommentService CommentService
@inject IUserProfileService UserProfileService

<div class="campground-page">
    <div class="campground-page-back">
        <NavLink href="/">Back</NavLink>
    </div>
    <div class="campground-page-info">
        <Card>
            <!-- <div class="campground-page-image" style="background-image:url(@campground.Image)"></div> -->
            <img src="@campground.Image">
            <div class="campground-page-info-description">
                <h5>@campground.Title</h5>
                <p>@campground.Description</p>
            </div>
        </Card>
    </div>

    <div class="campground-page-comments">
        <Card>
            <h5>Comments</h5>

            @if (comments.Count > 0)
            {
                <CommentList Comments="@comments" />
            }

            @if (comments.Count == 0)
            {
                <span>No comments yet.</span>
            }

            @if (profile.isLoggedIn())
            {
                 <div class="create-comment">
                     <div class="create-comment-input">
                        <textarea
                            type="text"
                            @bind-value="NewComment.Comment"
                            @bind-value:event="oninput"
                            placeholder="Comment" row="10" col="10">
                        </textarea>
                     </div>

                    <div class="create-comment-cta">
                        <button disabled=@commentReadyForSave @onclick="AddComment">Add Comment</button>
                    </div>
                 </div>
            }
        </Card>
    </div>
</div>

@code
{
    [Parameter]
    public string Id { get; set; }

    public Campers.Models.Campground campground { get; set; } = new Campers.Models.Campground();

    public List<Campers.Models.Comment> comments { get; set; } = new List<Campers.Models.Comment>();

    public CommentForCreate NewComment { get; set; } = new CommentForCreate();

    public bool commentReadyForSave => NewComment.Comment.Length < 3;

    private UserProfile profile = new UserProfile();

    protected async override Task OnInitializedAsync()
    {
      await PopulateUserProfile();
      var campgroundId = int.Parse(Id);
      campground = await CampgroundService.GetById(campgroundId);
      comments = await CommentService.GetComments(campgroundId);
      StateHasChanged();
    }

    public async void AddComment()
    {
      NewComment.UserId = GetUserId();
      var result = await CommentService.Create(int.Parse(Id), NewComment);

      if (result != null)
      {
        comments.Add(result);
        NewComment = new CommentForCreate();
        StateHasChanged();
      }
    }

    private async Task PopulateUserProfile()
    {
      profile = await UserProfileService.GetProfile();
    }

    private int GetUserId()
    {
      return profile.Id;
    }
}
